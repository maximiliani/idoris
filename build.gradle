/*
 * Copyright (c) 2025 Karlsruhe Institute of Technology
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

plugins {
    id "java"
    id "org.springframework.boot" version "3.5.0"    // 3.5.0-M*
    id "io.spring.dependency-management" version "1.1.7"
    id "io.freefair.lombok" version "8.13.1"
    id "io.freefair.maven-publish-java" version "8.13.1"
    id "org.owasp.dependencycheck" version "12.1.1"
    id "org.asciidoctor.jvm.convert" version "4.0.4"
    id "net.ltgt.errorprone" version "4.2.0"
    id "net.researchgate.release" version "3.1.0"
    id "com.gorylenko.gradle-git-properties" version "2.5.0"
    id "jacoco"
    id "com.github.ben-manes.versions" version "0.52.0"
}

description = 'IDORIS - An Integrated Data Type and Operations Registry with Inheritance System'
group = 'edu.kit.datamanager'
version = '0.0.2-SNAPSHOT'

// Update source/target compatibility syntax
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri("https://repo.spring.io/milestone")
    }
}

ext {
    springBootVersion = "3.5.0"
    springDocVersion = "2.8.8"
    errorproneVersion = "2.38.0"
    errorproneJavacVersion = "9+181-r4173-1"     // keep until a newer tag is published
    httpClientVersion = "5.5"
    javersVersion = "7.3.7"             // unchanged (latest)
    set("snippetsDir", file("build/generated-snippets"))
}

dependencies {
    /* Spring BOM â€“ drives every spring-boot starter below */
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

    /* Spring Boot starters (version comes from the BOM) */
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-neo4j"
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-hateoas"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.data:spring-data-rest-hal-explorer:5.0.0-M3"

    /* OpenAPI */
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-common:${springDocVersion}"

    /* HTTP client */
    implementation "org.apache.httpcomponents.client5:httpclient5:${httpClientVersion}"

    /* Development helpers */
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    /* Lombok */
    compileOnly "org.projectlombok:lombok:1.18.38"
    annotationProcessor "org.projectlombok:lombok:1.18.38"

    // Google AutoService for META-INF/services generation for your processor
    implementation 'com.google.auto.service:auto-service-annotations:1.1.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.1.1'

    /* Error-prone */
    errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    annotationProcessor "com.google.errorprone:error_prone_core:${errorproneVersion}"

    /* Tests */
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:3.0.3"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.junit.jupiter:junit-jupiter:5.13.0"
}

// Modify JavaCompile tasks configuration
tasks.withType(JavaCompile).configureEach {
    if (name.toLowerCase().contains('test')) {
        options.errorprone.enabled = false
    }
    options.compilerArgs += [
            '-Xlint:unchecked',
            '-Xlint:deprecation',
            '-Xmaxwarns', '200'
    ]

    options.errorprone {
        disableWarningsInGeneratedCode = true
    }
}

// Update test configuration
tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
    finalizedBy tasks.named('jacocoTestReport')

    jvmArgs = ['-Xmx4g']  // Replace maxHeapSize

    environment('spring.config.location', 'optional:classpath:/test-config/')

    testLogging {
        events = ['started', 'passed', 'skipped', 'failed']
        showStandardStreams = true
        outputs.upToDateWhen { false }
    }
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test

    attributes = [
            'snippets': snippetsDir,
            'version' : jar.archiveVersion,
            'date'    : new SimpleDateFormat("yyyy-MM-dd").format(new Date())
    ]

    sourceDir file("docs/")
    outputDir = file("build/generated-docs")

    options doctype: 'book'

    forkOptions {
        jvmArgs = [
                "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED",
                "--add-opens", "java.base/java.io=ALL-UNNAMED"
        ]
    }
}

// Update jar configuration
tasks.named('jar') {
    enabled = false
}

// Update bootJar configuration
bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes('Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher')
    }
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
    launchScript()
}